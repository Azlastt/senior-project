{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3501276,"sourceType":"datasetVersion","datasetId":2107243},{"sourceId":9256064,"sourceType":"datasetVersion","datasetId":5600107},{"sourceId":9374624,"sourceType":"datasetVersion","datasetId":5686196}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        # print(os.path.join(dirname, filename))\n        pass","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-30T12:07:39.235588Z","iopub.execute_input":"2024-09-30T12:07:39.236068Z","iopub.status.idle":"2024-09-30T12:07:43.356852Z","shell.execute_reply.started":"2024-09-30T12:07:39.236019Z","shell.execute_reply":"2024-09-30T12:07:43.355506Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"# **ONE INSTRUMENT**","metadata":{}},{"cell_type":"markdown","source":"## **Mel-spectrogram**","metadata":{}},{"cell_type":"code","source":"import librosa\nimport librosa.display\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\n# Dictionary of instruments with multiple examples for comparison\ninstrument_pairs = {\n    'Guitar': {\n        'Acoustic': [\n            'guitar_acoustic_000-024-025.wav',\n            'guitar_acoustic_000-022-075.wav',\n            'guitar_acoustic_000-023-127.wav'\n        ],\n        'Electronic': [\n            'guitar_electronic_000-024-025.wav',\n            'guitar_electronic_000-022-075.wav',\n            'guitar_electronic_000-024-127.wav'\n        ]\n    },\n    'Organ': {\n        'Acoustic': [\n            'organ_acoustic_000-024-127.wav',\n            'organ_acoustic_000-033-127.wav',\n            'organ_acoustic_000-028-127.wav'\n        ],\n        'Electronic': [\n            'organ_electronic_000-022-025.wav',\n            'organ_electronic_000-023-075.wav',\n            'organ_electronic_000-022-127.wav'\n        ]\n    },\n    'Keyboard': {\n        'Acoustic': [\n            'keyboard_acoustic_000-022-025.wav',\n            'keyboard_acoustic_000-024-075.wav',\n            'keyboard_acoustic_000-022-127.wav'\n        ],\n        'Electronic': [\n            'keyboard_electronic_000-022-025.wav',\n            'keyboard_electronic_000-023-075.wav',\n            'keyboard_electronic_000-021-127.wav'\n        ]\n    },\n    'Flute': {\n        'Acoustic': [\n            'flute_acoustic_000-056-025.wav',\n            'flute_acoustic_000-058-075.wav',\n            'flute_acoustic_000-056-127.wav'\n        ],\n        'Electronic': [\n            'flute_electronic_000-063-127.wav',\n            'flute_electronic_000-065-127.wav',\n            'flute_electronic_000-067-127.wav'\n        ]\n    }\n}\n\n# Directory containing the files\ndirectory = '/kaggle/input/nsyth-dataset/train/'\n\n# Loop through each instrument and plot comparisons\nfor instrument, versions in instrument_pairs.items():\n    for version, filenames in versions.items():\n        plt.figure(figsize=(15, 3))  # Adjust figure size as needed\n        \n        for i, filename in enumerate(filenames, 1):\n            file_path = os.path.join(directory, filename)\n            \n            # Load the WAV file\n            y, sr = librosa.load(file_path, sr=None)\n            \n            # Compute Mel Spectrogram\n            S = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=128)\n            S_dB = librosa.power_to_db(S, ref=np.max)\n            \n            # Plot Mel Spectrogram\n            plt.subplot(1, len(filenames), i)  # 1 row, len(filenames) columns, ith subplot\n            librosa.display.specshow(S_dB, sr=sr, x_axis='time', y_axis='mel', cmap='viridis')\n            plt.colorbar(format='%+2.0f dB')\n            plt.title(f'{instrument} - {version} ({i})')\n        \n        plt.tight_layout()\n        plt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-28T16:27:35.253873Z","iopub.execute_input":"2024-09-28T16:27:35.254488Z","iopub.status.idle":"2024-09-28T16:27:59.142910Z","shell.execute_reply.started":"2024-09-28T16:27:35.254441Z","shell.execute_reply":"2024-09-28T16:27:59.141922Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## **MFCCs**","metadata":{}},{"cell_type":"code","source":"import librosa\nimport librosa.display\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\n# Dictionary of instruments with multiple examples for comparison\ninstrument_pairs = {\n    'Guitar': {\n        'Acoustic': [\n            'guitar_acoustic_000-024-025.wav',\n            'guitar_acoustic_000-022-075.wav',\n            'guitar_acoustic_000-023-127.wav'\n        ],\n        'Electronic': [\n            'guitar_electronic_000-024-025.wav',\n            'guitar_electronic_000-022-075.wav',\n            'guitar_electronic_000-024-127.wav'\n        ]\n    },\n    'Organ': {\n        'Acoustic': [\n            'organ_acoustic_000-024-127.wav',\n            'organ_acoustic_000-033-127.wav',\n            'organ_acoustic_000-028-127.wav'\n        ],\n        'Electronic': [\n            'organ_electronic_000-022-025.wav',\n            'organ_electronic_000-023-075.wav',\n            'organ_electronic_000-022-127.wav'\n        ]\n    },\n    'Keyboard': {\n        'Acoustic': [\n            'keyboard_acoustic_000-022-025.wav',\n            'keyboard_acoustic_000-024-075.wav',\n            'keyboard_acoustic_000-022-127.wav'\n        ],\n        'Electronic': [\n            'keyboard_electronic_000-022-025.wav',\n            'keyboard_electronic_000-023-075.wav',\n            'keyboard_electronic_000-021-127.wav'\n        ]\n    },\n    'Flute': {\n        'Acoustic': [\n            'flute_acoustic_000-056-025.wav',\n            'flute_acoustic_000-058-075.wav',\n            'flute_acoustic_000-056-127.wav'\n        ],\n        'Electronic': [\n            'flute_electronic_000-063-127.wav',\n            'flute_electronic_000-065-127.wav',\n            'flute_electronic_000-067-127.wav'\n        ]\n    }\n}\n\n# Directory containing the files\ndirectory = '/kaggle/input/nsyth-dataset/train/'\n\n# Loop through each instrument and plot comparisons\nfor instrument, versions in instrument_pairs.items():\n    for version, filenames in versions.items():\n        plt.figure(figsize=(15, 3))  # Adjust figure size as needed\n        \n        for i, filename in enumerate(filenames, 1):\n            file_path = os.path.join(directory, filename)\n            \n            # Load the WAV file\n            y, sr = librosa.load(file_path, sr=None)\n            \n            # Compute MFCCs\n            mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)\n            \n            # Plot MFCCs\n            plt.subplot(1, len(filenames), i)  # 1 row, len(filenames) columns, ith subplot\n            librosa.display.specshow(mfccs, sr=sr, x_axis='time', cmap='viridis')\n            plt.colorbar(format='%+2.0f dB')\n            plt.title(f'{instrument} - {version} ({i})')\n        \n        plt.tight_layout()\n        plt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-29T05:19:06.667824Z","iopub.execute_input":"2024-09-29T05:19:06.668178Z","iopub.status.idle":"2024-09-29T05:19:13.543355Z","shell.execute_reply.started":"2024-09-29T05:19:06.668146Z","shell.execute_reply":"2024-09-29T05:19:13.542479Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **IRMAS DATASET**","metadata":{}},{"cell_type":"markdown","source":"## **Mel-Spectrogram**","metadata":{}},{"cell_type":"code","source":"import os\nimport librosa\nimport librosa.display\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.utils import to_categorical\n\n# Paths to the dataset directories\ntrain_dir = '/kaggle/input/irmas-training-data/IRMAS-TrainingData'\n\n# Function to load and preprocess the audio files\ndef load_audio_files(directory, examples_per_instrument=3):\n    X = []\n    y = []\n    # Only consider directories (ignore files like README.txt)\n    labels = [d for d in sorted(os.listdir(directory)) if os.path.isdir(os.path.join(directory, d))]\n    label_dict = {label: i for i, label in enumerate(labels)}\n\n    for label in labels:\n        instrument_dir = os.path.join(directory, label)\n        file_counter = 0  # Initialize a counter for each instrument\n        plt.figure(figsize=(20, 5))  # Adjust figure size as needed\n        \n        for i, file_name in enumerate(os.listdir(instrument_dir)):\n            if file_name.endswith('.wav') and file_counter < examples_per_instrument:\n                file_path = os.path.join(instrument_dir, file_name)\n                # Load audio file\n                y_audio, sr = librosa.load(file_path, sr=None)\n                # Convert to Mel-spectrogram\n                mel_spect = librosa.feature.melspectrogram(y=y_audio, sr=sr, n_mels=128, fmax=8000)\n                mel_spect_db = librosa.power_to_db(mel_spect, ref=np.max)\n                # Resize to a fixed size if necessary\n                if mel_spect_db.shape[1] < 128:\n                    mel_spect_db = np.pad(mel_spect_db, ((0, 0), (0, 128 - mel_spect_db.shape[1])), mode='constant')\n                else:\n                    mel_spect_db = mel_spect_db[:, :128]\n                # Add channel dimension\n                mel_spect_db = mel_spect_db[..., np.newaxis]\n                # Append to dataset\n                X.append(mel_spect_db)\n                y.append(label_dict[label])\n                \n                # Plot the Mel-spectrogram as a subplot\n                plt.subplot(1, examples_per_instrument, file_counter + 1)\n                librosa.display.specshow(mel_spect_db[:, :, 0], sr=sr, x_axis='time', y_axis='mel', cmap='viridis')\n                plt.colorbar(format='%+2.0f dB')\n                plt.title(f'{label} - Example {file_counter + 1}')\n                plt.tight_layout()\n\n                file_counter += 1  # Increment the counter\n\n        plt.show()  # Show all subplots for the current instrument\n\n    X = np.array(X)\n    y = to_categorical(y, num_classes=len(labels))\n    return X, y\n\n# Load training data and plot examples\nX_train, y_train = load_audio_files(train_dir, examples_per_instrument=3)","metadata":{"execution":{"iopub.status.busy":"2024-09-28T16:31:33.911139Z","iopub.execute_input":"2024-09-28T16:31:33.911785Z","iopub.status.idle":"2024-09-28T16:32:02.779661Z","shell.execute_reply.started":"2024-09-28T16:31:33.911727Z","shell.execute_reply":"2024-09-28T16:32:02.778638Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## **Harmonics**","metadata":{}},{"cell_type":"code","source":"import os\nimport librosa\nimport librosa.display\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Paths to the dataset directories\ntrain_dir = '/kaggle/input/irmas-training-data/IRMAS-TrainingData'\n\n# Function to load and process multiple audio files\ndef process_multiple_files(directory, examples_per_instrument=3):\n    # Only consider directories (ignore files like README.txt)\n    labels = [d for d in sorted(os.listdir(directory)) if os.path.isdir(os.path.join(directory, d))]\n    \n    for label in labels:\n        instrument_dir = os.path.join(directory, label)\n        file_counter = 0  # Initialize a counter for each instrument\n        plt.figure(figsize=(15, 10))  # Adjust figure size as needed\n        \n        for i, file_name in enumerate(os.listdir(instrument_dir)):\n            if file_name.endswith('.wav') and file_counter < examples_per_instrument:\n                file_path = os.path.join(instrument_dir, file_name)\n                \n                # Process the file\n                y_audio, sr = librosa.load(file_path, sr=None)\n                \n                # Apply Harmonic/Percussive Source Separation (HPSS)\n                y_harmonic, y_percussive = librosa.effects.hpss(y_audio)\n                \n                # Compute Mel-spectrogram for the harmonic component\n                mel_spect_harmonic = librosa.feature.melspectrogram(y=y_harmonic, sr=sr, n_mels=128, fmax=8000)\n                mel_spect_db_harmonic = librosa.power_to_db(mel_spect_harmonic, ref=np.max)\n                \n                # Compute Mel-spectrogram for the original audio\n                mel_spect_original = librosa.feature.melspectrogram(y=y_audio, sr=sr, n_mels=128, fmax=8000)\n                mel_spect_db_original = librosa.power_to_db(mel_spect_original, ref=np.max)\n                \n                # Plot both Mel-spectrograms\n                plt.subplot(examples_per_instrument, 2, file_counter * 2 + 1)\n                librosa.display.specshow(mel_spect_db_original, sr=sr, x_axis='time', y_axis='mel', cmap='viridis')\n                plt.colorbar(format='%+2.0f dB')\n                plt.title(f'{label} - Original {file_counter + 1}')\n                \n                plt.subplot(examples_per_instrument, 2, file_counter * 2 + 2)\n                librosa.display.specshow(mel_spect_db_harmonic, sr=sr, x_axis='time', y_axis='mel', cmap='viridis')\n                plt.colorbar(format='%+2.0f dB')\n                plt.title(f'{label} - Harmonic {file_counter + 1}')\n                \n                file_counter += 1  # Increment the counter\n                \n                # Break the loop if the required number of examples is reached\n                if file_counter >= examples_per_instrument:\n                    break\n        \n        plt.tight_layout()\n        plt.show()  # Show all subplots for the current instrument\n\n# Process and visualize the files\nprocess_multiple_files(train_dir, examples_per_instrument=3)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-28T16:32:31.223580Z","iopub.execute_input":"2024-09-28T16:32:31.224346Z","iopub.status.idle":"2024-09-28T16:33:09.502523Z","shell.execute_reply.started":"2024-09-28T16:32:31.224247Z","shell.execute_reply":"2024-09-28T16:33:09.501614Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## **Harmonic & Percussive**","metadata":{}},{"cell_type":"code","source":"import os\nimport librosa\nimport librosa.display\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Paths to the dataset directories\ntrain_dir = '/kaggle/input/irmas-training-data/IRMAS-TrainingData'\n\n# Function to load and process multiple audio files\ndef process_multiple_files(directory, examples_per_instrument=3):\n    # Only consider directories (ignore files like README.txt)\n    labels = [d for d in sorted(os.listdir(directory)) if os.path.isdir(os.path.join(directory, d))]\n    \n    for label in labels:\n        instrument_dir = os.path.join(directory, label)\n        file_counter = 0  # Initialize a counter for each instrument\n        plt.figure(figsize=(15, 10))  # Adjust figure size as needed\n        \n        for i, file_name in enumerate(os.listdir(instrument_dir)):\n            if file_name.endswith('.wav') and file_counter < examples_per_instrument:\n                file_path = os.path.join(instrument_dir, file_name)\n                \n                # Process the file\n                y_audio, sr = librosa.load(file_path, sr=None)\n                \n                # Apply Harmonic/Percussive Source Separation (HPSS)\n                y_harmonic, y_percussive = librosa.effects.hpss(y_audio)\n                \n                # Compute Mel-spectrograms\n                mel_spect_original = librosa.feature.melspectrogram(y=y_audio, sr=sr, n_mels=128, fmax=8000)\n                mel_spect_db_original = librosa.power_to_db(mel_spect_original, ref=np.max)\n                \n                mel_spect_harmonic = librosa.feature.melspectrogram(y=y_harmonic, sr=sr, n_mels=128, fmax=8000)\n                mel_spect_db_harmonic = librosa.power_to_db(mel_spect_harmonic, ref=np.max)\n                \n                mel_spect_percussive = librosa.feature.melspectrogram(y=y_percussive, sr=sr, n_mels=128, fmax=8000)\n                mel_spect_db_percussive = librosa.power_to_db(mel_spect_percussive, ref=np.max)\n                \n                # Plot both Mel-spectrograms\n                plt.subplot(examples_per_instrument, 3, file_counter * 3 + 1)\n                librosa.display.specshow(mel_spect_db_original, sr=sr, x_axis='time', y_axis='mel', cmap='viridis')\n                plt.colorbar(format='%+2.0f dB')\n                plt.title(f'{label} - Original {file_counter + 1}')\n                \n                plt.subplot(examples_per_instrument, 3, file_counter * 3 + 2)\n                librosa.display.specshow(mel_spect_db_harmonic, sr=sr, x_axis='time', y_axis='mel', cmap='viridis')\n                plt.colorbar(format='%+2.0f dB')\n                plt.title(f'{label} - Harmonic {file_counter + 1}')\n                \n                plt.subplot(examples_per_instrument, 3, file_counter * 3 + 3)\n                librosa.display.specshow(mel_spect_db_percussive, sr=sr, x_axis='time', y_axis='mel', cmap='viridis')\n                plt.colorbar(format='%+2.0f dB')\n                plt.title(f'{label} - Percussive {file_counter + 1}')\n                \n                file_counter += 1  # Increment the counter\n                \n                # Break the loop if the required number of examples is reached\n                if file_counter >= examples_per_instrument:\n                    break\n        \n        plt.tight_layout()\n        plt.show()  # Show all subplots for the current instrument\n\n# Process and visualize the files\nprocess_multiple_files(train_dir, examples_per_instrument=3)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-28T16:33:09.504616Z","iopub.execute_input":"2024-09-28T16:33:09.505198Z","iopub.status.idle":"2024-09-28T16:33:57.868357Z","shell.execute_reply.started":"2024-09-28T16:33:09.505155Z","shell.execute_reply":"2024-09-28T16:33:57.867251Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **CNN with Mel-spectrogram and MFCCs (Mel-Frequency Cepstral Coefficients)**","metadata":{}},{"cell_type":"markdown","source":"## Visualize dataset (Mel-spectrogram, MFCCs)","metadata":{}},{"cell_type":"code","source":"import os\nimport librosa\nimport librosa.display\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef plot_audio_features(y, sr, mel_spectrogram_db, mfcc, title):\n    plt.figure(figsize=(15, 5))\n\n    # Plot Audio Waveform\n    plt.subplot(1, 3, 1)\n    librosa.display.waveshow(y, sr=sr)\n    plt.ylim([-1.0, 1.0])\n    plt.title(f'Waveform - {title}')\n\n    # Plot Mel-spectrogram\n    plt.subplot(1, 3, 2)\n    librosa.display.specshow(mel_spectrogram_db, sr=sr, x_axis='time', y_axis='mel', cmap='viridis')\n    plt.colorbar(format='%+2.0f dB')\n    plt.title(f'Mel-spec - {title}')\n\n    # Plot MFCCs\n    plt.subplot(1, 3, 3)\n    librosa.display.specshow(mfcc, sr=sr, x_axis='time', vmin=-400, vmax=200)\n    plt.colorbar()\n    plt.title(f'MFCCs - {title}')\n\n    plt.tight_layout()\n    plt.show()\n\ndef load_and_plot(directory, examples_per_instrument=3):\n    for label in sorted(os.listdir(directory)):\n        label_path = os.path.join(directory, label)\n        if os.path.isdir(label_path):\n            if label == 'voice':\n                continue\n\n            count = 0\n            for file_name in sorted(os.listdir(label_path)):\n                if file_name.endswith('.wav') and count < examples_per_instrument:\n                    file_path = os.path.join(label_path, file_name)\n                    y, sr = librosa.load(file_path, sr=None)\n\n                    # Extract Mel-spectrogram\n                    mel_spectrogram = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=128, fmax=8000)\n                    mel_spectrogram_db = librosa.power_to_db(mel_spectrogram, ref=np.max)\n\n                    # Extract MFCCs\n                    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)\n\n                    # Plot features\n                    plot_audio_features(y, sr, mel_spectrogram_db, mfcc, title=f'{label} - {file_name}')\n                    count += 1\n\ndirectory = '/kaggle/input/irmas-training-data/IRMAS-TrainingData'\nload_and_plot(directory, examples_per_instrument=3)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-28T16:51:50.005518Z","iopub.execute_input":"2024-09-28T16:51:50.005943Z","iopub.status.idle":"2024-09-28T16:52:33.403488Z","shell.execute_reply.started":"2024-09-28T16:51:50.005907Z","shell.execute_reply":"2024-09-28T16:52:33.402535Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Import dataset","metadata":{}},{"cell_type":"code","source":"import os\nimport librosa\nimport numpy as np\nfrom tensorflow.keras.utils import to_categorical\n\ndef load_audio_files(directory):\n    mel_spectrograms = []\n    mfccs = []\n    labels = []\n    label_dict = {}\n    label_idx = 0\n\n    for label in sorted(os.listdir(directory)):\n        label_path = os.path.join(directory, label)\n        if os.path.isdir(label_path):\n            if label == 'voi':\n                continue\n            if label not in label_dict:\n                label_dict[label] = label_idx\n                label_idx += 1\n\n            for file_name in os.listdir(label_path):\n                if file_name.endswith('.wav'):\n                    file_path = os.path.join(label_path, file_name)\n                    y, sr = librosa.load(file_path, sr=None)\n\n                    # Extract Mel-spectrogram\n                    mel_spectrogram = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=128, fmax=8000)\n                    mel_spectrogram_db = librosa.power_to_db(mel_spectrogram, ref=np.max)\n\n                    # Extract MFCCs\n                    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)\n\n                    mel_spectrograms.append(mel_spectrogram_db)\n                    mfccs.append(mfcc)\n                    labels.append(label_dict[label])\n\n    mel_spectrograms = np.array(mel_spectrograms)\n    mfccs = np.array(mfccs)\n    labels = to_categorical(labels, num_classes=len(label_dict))\n\n    return mel_spectrograms, mfccs, labels, label_dict\n\ndirectory = '/kaggle/input/irmas-training-data/IRMAS-TrainingData'\nmel_spectrograms, mfccs, labels, label_dict = load_audio_files(directory)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-30T17:06:35.296199Z","iopub.execute_input":"2024-09-30T17:06:35.297116Z","iopub.status.idle":"2024-09-30T17:12:36.429854Z","shell.execute_reply.started":"2024-09-30T17:06:35.297075Z","shell.execute_reply":"2024-09-30T17:12:36.428403Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"# preparing them for input into models that require a 3D shape (height, width, channels)\ndef preprocess_data(mel_spectrograms, mfccs):\n    mel_spectrograms = np.expand_dims(mel_spectrograms, axis=-1)  # Add channel dimension\n    mfccs = np.expand_dims(mfccs, axis=-1)  # Add channel dimension\n\n    return mel_spectrograms, mfccs\n\nmel_spectrograms, mfccs = preprocess_data(mel_spectrograms, mfccs)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-30T17:12:36.432075Z","iopub.execute_input":"2024-09-30T17:12:36.433247Z","iopub.status.idle":"2024-09-30T17:12:36.440880Z","shell.execute_reply.started":"2024-09-30T17:12:36.433196Z","shell.execute_reply":"2024-09-30T17:12:36.439849Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n# Split the dataset with stratification\nX_train_mel, X_test_mel, X_train_mfcc, X_test_mfcc, y_train, y_test = train_test_split(\n    mel_spectrograms, mfccs, labels, test_size=0.1, stratify=np.argmax(labels, axis=1), random_state=1449\n)\nprint(f\"Training data shape: {X_train_mel.shape}, {X_train_mfcc.shape}\")\nprint(f\"Training labels shape: {y_train.shape}\")\n\nprint(f\"Testing data shape: {X_test_mel.shape}, {X_test_mfcc.shape}\")\nprint(f\"Testing labels shape: {y_test.shape}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-30T17:12:36.442600Z","iopub.execute_input":"2024-09-30T17:12:36.442898Z","iopub.status.idle":"2024-09-30T17:12:37.154837Z","shell.execute_reply.started":"2024-09-30T17:12:36.442867Z","shell.execute_reply":"2024-09-30T17:12:37.153794Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Training data shape: (5334, 128, 259, 1), (5334, 13, 259, 1)\nTraining labels shape: (5334, 10)\nTesting data shape: (593, 128, 259, 1), (593, 13, 259, 1)\nTesting labels shape: (593, 10)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Model Training","metadata":{}},{"cell_type":"code","source":"# Model1 Test Loss: 0.90, Test Accuracy: 0.75\nfrom tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Flatten, Dense, Concatenate, GlobalAveragePooling2D\nfrom tensorflow.keras import Model\nimport os\nimport librosa\nimport numpy as np\nfrom tensorflow.keras.utils import to_categorical\n\n# Build and train the model\ninput_mel = Input(shape=(128, None, 1))\nx_mel = Conv2D(32, (3, 3), activation='relu')(input_mel)\nx_mel = MaxPooling2D((2, 2))(x_mel)\nx_mel = Conv2D(64, (3, 3), activation='relu')(x_mel)\nx_mel = MaxPooling2D((2, 2))(x_mel)\nx_mel = Conv2D(128, (3, 3), activation='relu')(x_mel)\nx_mel = MaxPooling2D((2, 2))(x_mel)\nx_mel = GlobalAveragePooling2D()(x_mel)\n\ninput_mfcc = Input(shape=(13, None, 1))\nx_mfcc = Conv2D(32, (3, 3), activation='relu')(input_mfcc)\nx_mfcc = MaxPooling2D((2, 2))(x_mfcc)\nx_mfcc = Conv2D(64, (3, 3), activation='relu')(x_mfcc)\nx_mfcc = MaxPooling2D((2, 2))(x_mfcc)\nx_mfcc = GlobalAveragePooling2D()(x_mfcc)\n\ncombined = Concatenate()([x_mel, x_mfcc])\nz = Dense(128, activation='relu')(combined)\noutput = Dense(len(label_dict), activation='softmax')(z)\n\n'''\nmodel = Model(inputs=[input_mel, input_mfcc], outputs=output)\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nhistory = model.fit([X_train_mel, X_train_mfcc], y_train, epochs=30, batch_size=64, validation_split=0.2)\n'''","metadata":{"execution":{"iopub.status.busy":"2024-09-28T17:01:14.650727Z","iopub.execute_input":"2024-09-28T17:01:14.651572Z","iopub.status.idle":"2024-09-28T17:01:15.423974Z","shell.execute_reply.started":"2024-09-28T17:01:14.651533Z","shell.execute_reply":"2024-09-28T17:01:15.422923Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Model3 Test Loss: ..., Test Accuracy: ...\nfrom tensorflow.keras.layers import Dropout, Input, Conv2D, MaxPooling2D, Flatten, Dense, Concatenate, GlobalAveragePooling2D\nfrom tensorflow.keras import Model\nimport os\nimport librosa\nimport numpy as np\nfrom tensorflow.keras.utils import to_categorical\n\n# Build and train the model\ninput_mel = Input(shape=(128, None, 1))\nx_mel = Conv2D(32, (3, 3), activation='relu')(input_mel)\nx_mel = MaxPooling2D((2, 2))(x_mel)\nx_mel = Conv2D(64, (3, 3), activation='relu')(x_mel)\nx_mel = MaxPooling2D((2, 2))(x_mel)\nx_mel = Dropout(0.2)(x_mel)\nx_mel = Conv2D(128, (3, 3), activation='relu')(x_mel)\nx_mel = MaxPooling2D((2, 2))(x_mel)\nx_mel = Dropout(0.25)(x_mel)\nx_mel = Conv2D(256, (3, 3), activation='relu')(x_mel)\nx_mel = MaxPooling2D((2, 2))(x_mel)\nx_mel = Dropout(0.5)(x_mel)\nx_mel = GlobalAveragePooling2D()(x_mel)\n\ninput_mfcc = Input(shape=(13, None, 1))\nx_mfcc = Conv2D(8, (3, 3), activation='relu')(input_mfcc)\nx_mfcc = MaxPooling2D((2, 2))(x_mfcc)\nx_mfcc = Conv2D(16, (3, 3), activation='relu')(x_mfcc)\nx_mfcc = MaxPooling2D((2, 2))(x_mfcc)\nx_mfcc = Dropout(0.2)(x_mfcc)\nx_mfcc = GlobalAveragePooling2D()(x_mfcc)\n\ncombined = Concatenate()([x_mel, x_mfcc])\nz = Dense(512, activation='relu')(combined)\nz = Dropout(0.6)(z)\noutput = Dense(len(label_dict), activation='softmax')(z)","metadata":{"execution":{"iopub.status.busy":"2024-09-30T17:57:23.955681Z","iopub.execute_input":"2024-09-30T17:57:23.956602Z","iopub.status.idle":"2024-09-30T17:57:24.059239Z","shell.execute_reply.started":"2024-09-30T17:57:23.956559Z","shell.execute_reply":"2024-09-30T17:57:24.058125Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"# Model2 Test Loss: 0.89, Test Accuracy: 0.72\nfrom tensorflow.keras.layers import Dropout, Input, Conv2D, MaxPooling2D, Flatten, Dense, Concatenate, GlobalAveragePooling2D\nfrom tensorflow.keras import Model\nimport os\nimport librosa\nimport numpy as np\nfrom tensorflow.keras.utils import to_categorical\n\n# Build and train the model\ninput_mel = Input(shape=(128, None, 1))\nx_mel = Conv2D(32, (3, 3), activation='relu')(input_mel)\nx_mel = MaxPooling2D((2, 2))(x_mel)\nx_mel = Conv2D(64, (3, 3), activation='relu')(x_mel)\nx_mel = MaxPooling2D((2, 2))(x_mel)\nx_mel = Conv2D(128, (3, 3), activation='relu')(x_mel)\nx_mel = MaxPooling2D((2, 2))(x_mel)\nx_mel = GlobalAveragePooling2D()(x_mel)\n\ninput_mfcc = Input(shape=(13, None, 1))\nx_mfcc = Conv2D(8, (3, 3), activation='relu')(input_mfcc)\nx_mfcc = MaxPooling2D((2, 2))(x_mfcc)\nx_mfcc = Conv2D(16, (3, 3), activation='relu')(x_mfcc)\nx_mfcc = MaxPooling2D((2, 2))(x_mfcc)\nx_mfcc = GlobalAveragePooling2D()(x_mfcc)\n\ncombined = Concatenate()([x_mel, x_mfcc])\nz = Dense(256, activation='relu')(combined)\nz = Dropout(0.5)(z)\noutput = Dense(len(label_dict), activation='softmax')(z)\n\n'''\nmodel = Model(inputs=[input_mel, input_mfcc], outputs=output)\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nhistory = model.fit([X_train_mel, X_train_mfcc], y_train, epochs=30, batch_size=64, validation_split=0.2)\n'''","metadata":{"execution":{"iopub.status.busy":"2024-09-29T15:12:20.569712Z","iopub.execute_input":"2024-09-29T15:12:20.570572Z","iopub.status.idle":"2024-09-29T15:12:21.351584Z","shell.execute_reply.started":"2024-09-29T15:12:20.570522Z","shell.execute_reply":"2024-09-29T15:12:21.350584Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Keras tuner for CNN","metadata":{}},{"cell_type":"code","source":"import keras_tuner as kt\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, GlobalAveragePooling2D, Concatenate, Dense, Dropout\nfrom tensorflow.keras.optimizers import Adam\n\ndef build_model(hp):\n    # Mel-spectrogram branch\n    input_mel = Input(shape=(128, None, 1))\n    x_mel = Conv2D(32, (3, 3), activation='relu')(input_mel)\n    x_mel = MaxPooling2D((2, 2))(x_mel)\n    x_mel = Conv2D(64, (3, 3), activation='relu')(x_mel)\n    x_mel = MaxPooling2D((2, 2))(x_mel)\n    x_mel = Conv2D(128, (3, 3), activation='relu')(x_mel)\n    x_mel = MaxPooling2D((2, 2))(x_mel)\n    x_mel = GlobalAveragePooling2D()(x_mel)\n\n    # MFCC branch\n    input_mfcc = Input(shape=(13, None, 1))\n    x_mfcc = Conv2D(8, (3, 3), activation='relu')(input_mfcc)\n    x_mfcc = MaxPooling2D((2, 2))(x_mfcc)\n    x_mfcc = Conv2D(16, (3, 3), activation='relu')(x_mfcc)\n    x_mfcc = MaxPooling2D((2, 2))(x_mfcc)\n    x_mfcc = GlobalAveragePooling2D()(x_mfcc)\n\n    # Combine the two branches\n    combined = Concatenate()([x_mel, x_mfcc])\n\n    # Fully connected layers\n    z = Dense(hp.Int('dense_units', min_value=128, max_value=512, step=128), activation='relu')(combined)\n    z = Dropout(hp.Float('dropout', 0.1, 0.7, step=0.1))(z)  # Tuning the dropout rate\n\n    # Output layer\n    output = Dense(len(label_dict), activation='softmax')(z)\n\n    # Define the model\n    model = Model(inputs=[input_mel, input_mfcc], outputs=output)\n\n    # Compile the model with tunable learning rate\n    model.compile(\n        optimizer=Adam(learning_rate=hp.Float('learning_rate', 0.001, 0.001, step = 0.1)),\n        loss='categorical_crossentropy',\n        metrics=['accuracy']\n    )\n\n    return model\n\n# Set up Keras Tuner\ntuner = kt.RandomSearch(\n    build_model,\n    objective='val_accuracy',\n    max_trials=10,  # Number of different models to try\n    executions_per_trial=2,  # Number of times to evaluate each model\n    directory='my_dir',  # Directory to save results\n    project_name='instrument_recognition'\n)\n\n# Prepare your training data (X_train_mel, X_train_mfcc, y_train)\n# Call the search method\ntuner.search([X_train_mel, X_train_mfcc], y_train, epochs=50, validation_split=0.2)\n\n# Get the best model\nbest_model = tuner.get_best_models(num_models=1)[0]\n","metadata":{"execution":{"iopub.status.busy":"2024-09-29T08:14:20.581004Z","iopub.execute_input":"2024-09-29T08:14:20.581826Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from keras.callbacks import ModelCheckpoint, EarlyStopping\n\nmodel = Model(inputs=[input_mel, input_mfcc], outputs=output)\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Define where to save the best model\ncheckpoint = ModelCheckpoint('best_model.keras', \n                             monitor='val_loss',   \n                             save_best_only=True,  \n                             mode='min')           \n# early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n\n# model.to(device)\nhistory = model.fit([X_train_mel, X_train_mfcc], y_train, epochs=100, batch_size=64, \n                    validation_split=0.2, \n                    callbacks=[checkpoint])#, early_stopping","metadata":{"execution":{"iopub.status.busy":"2024-09-30T17:57:49.974106Z","iopub.execute_input":"2024-09-30T17:57:49.974749Z","iopub.status.idle":"2024-09-30T18:02:40.827490Z","shell.execute_reply.started":"2024-09-30T17:57:49.974694Z","shell.execute_reply":"2024-09-30T18:02:40.826298Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"Epoch 1/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m25s\u001b[0m 193ms/step - accuracy: 0.1513 - loss: 5.6135 - val_accuracy: 0.2905 - val_loss: 1.9886\nEpoch 2/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.3040 - loss: 2.0125 - val_accuracy: 0.3102 - val_loss: 1.9560\nEpoch 3/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.3351 - loss: 1.9164 - val_accuracy: 0.3749 - val_loss: 1.8122\nEpoch 4/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.3762 - loss: 1.8194 - val_accuracy: 0.3571 - val_loss: 1.8234\nEpoch 5/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.3824 - loss: 1.7780 - val_accuracy: 0.4039 - val_loss: 1.7216\nEpoch 6/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.4214 - loss: 1.7055 - val_accuracy: 0.4180 - val_loss: 1.6879\nEpoch 7/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.4328 - loss: 1.6659 - val_accuracy: 0.4199 - val_loss: 1.6885\nEpoch 8/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.4292 - loss: 1.6413 - val_accuracy: 0.4208 - val_loss: 1.6423\nEpoch 9/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.4648 - loss: 1.5849 - val_accuracy: 0.4545 - val_loss: 1.5914\nEpoch 10/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.4758 - loss: 1.5363 - val_accuracy: 0.4611 - val_loss: 1.5485\nEpoch 11/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.4914 - loss: 1.5113 - val_accuracy: 0.4611 - val_loss: 1.5484\nEpoch 12/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.5056 - loss: 1.4730 - val_accuracy: 0.4789 - val_loss: 1.5251\nEpoch 13/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.5095 - loss: 1.4399 - val_accuracy: 0.4883 - val_loss: 1.4857\nEpoch 14/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.5161 - loss: 1.4126 - val_accuracy: 0.4995 - val_loss: 1.4292\nEpoch 15/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.5522 - loss: 1.3450 - val_accuracy: 0.5211 - val_loss: 1.3722\nEpoch 16/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.5622 - loss: 1.2986 - val_accuracy: 0.5192 - val_loss: 1.3699\nEpoch 17/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.5681 - loss: 1.2797 - val_accuracy: 0.5445 - val_loss: 1.2692\nEpoch 18/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.5961 - loss: 1.2034 - val_accuracy: 0.5464 - val_loss: 1.2601\nEpoch 19/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.6048 - loss: 1.1576 - val_accuracy: 0.5839 - val_loss: 1.1777\nEpoch 20/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.6266 - loss: 1.1055 - val_accuracy: 0.5904 - val_loss: 1.1525\nEpoch 21/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.6347 - loss: 1.0664 - val_accuracy: 0.6045 - val_loss: 1.1331\nEpoch 22/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.6479 - loss: 1.0181 - val_accuracy: 0.5989 - val_loss: 1.1094\nEpoch 23/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.6530 - loss: 1.0139 - val_accuracy: 0.6157 - val_loss: 1.0643\nEpoch 24/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.6639 - loss: 0.9788 - val_accuracy: 0.6214 - val_loss: 1.0713\nEpoch 25/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.6775 - loss: 0.9306 - val_accuracy: 0.6373 - val_loss: 1.0259\nEpoch 26/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.6927 - loss: 0.9019 - val_accuracy: 0.6336 - val_loss: 1.0239\nEpoch 27/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.6907 - loss: 0.9096 - val_accuracy: 0.6654 - val_loss: 0.9690\nEpoch 28/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 38ms/step - accuracy: 0.7168 - loss: 0.8349 - val_accuracy: 0.6345 - val_loss: 1.0498\nEpoch 29/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.7161 - loss: 0.8244 - val_accuracy: 0.6785 - val_loss: 0.9529\nEpoch 30/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.7258 - loss: 0.8170 - val_accuracy: 0.6664 - val_loss: 0.9131\nEpoch 31/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.7317 - loss: 0.7971 - val_accuracy: 0.6532 - val_loss: 1.0157\nEpoch 32/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.7376 - loss: 0.7664 - val_accuracy: 0.6664 - val_loss: 0.9207\nEpoch 33/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.7375 - loss: 0.7780 - val_accuracy: 0.6635 - val_loss: 0.9827\nEpoch 34/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.7553 - loss: 0.7093 - val_accuracy: 0.6720 - val_loss: 0.9380\nEpoch 35/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.7512 - loss: 0.7119 - val_accuracy: 0.6673 - val_loss: 0.9489\nEpoch 36/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.7684 - loss: 0.6778 - val_accuracy: 0.6645 - val_loss: 0.9919\nEpoch 37/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.7685 - loss: 0.6687 - val_accuracy: 0.6832 - val_loss: 0.9506\nEpoch 38/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.7709 - loss: 0.6530 - val_accuracy: 0.6879 - val_loss: 0.9254\nEpoch 39/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.7837 - loss: 0.6312 - val_accuracy: 0.6757 - val_loss: 0.9938\nEpoch 40/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.7774 - loss: 0.6484 - val_accuracy: 0.7029 - val_loss: 0.8820\nEpoch 41/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.7841 - loss: 0.6169 - val_accuracy: 0.6832 - val_loss: 0.9252\nEpoch 42/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 40ms/step - accuracy: 0.7892 - loss: 0.5785 - val_accuracy: 0.6870 - val_loss: 0.8744\nEpoch 43/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.7860 - loss: 0.6241 - val_accuracy: 0.7132 - val_loss: 0.8419\nEpoch 44/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.7990 - loss: 0.5817 - val_accuracy: 0.6945 - val_loss: 0.8700\nEpoch 45/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.7945 - loss: 0.5838 - val_accuracy: 0.7038 - val_loss: 0.8932\nEpoch 46/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8185 - loss: 0.5235 - val_accuracy: 0.6982 - val_loss: 0.9145\nEpoch 47/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8002 - loss: 0.5329 - val_accuracy: 0.7245 - val_loss: 0.8799\nEpoch 48/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 38ms/step - accuracy: 0.8174 - loss: 0.5116 - val_accuracy: 0.7226 - val_loss: 0.8713\nEpoch 49/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8326 - loss: 0.4968 - val_accuracy: 0.6926 - val_loss: 0.9469\nEpoch 50/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8243 - loss: 0.5079 - val_accuracy: 0.7123 - val_loss: 0.9072\nEpoch 51/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8291 - loss: 0.4867 - val_accuracy: 0.7104 - val_loss: 0.9458\nEpoch 52/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8352 - loss: 0.4601 - val_accuracy: 0.7076 - val_loss: 0.9199\nEpoch 53/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8331 - loss: 0.4677 - val_accuracy: 0.6954 - val_loss: 1.0628\nEpoch 54/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8316 - loss: 0.4910 - val_accuracy: 0.7254 - val_loss: 0.9027\nEpoch 55/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8406 - loss: 0.4546 - val_accuracy: 0.7263 - val_loss: 0.9304\nEpoch 56/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8639 - loss: 0.4049 - val_accuracy: 0.7188 - val_loss: 0.9362\nEpoch 57/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8553 - loss: 0.4100 - val_accuracy: 0.7076 - val_loss: 0.9984\nEpoch 58/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.8579 - loss: 0.4212 - val_accuracy: 0.7329 - val_loss: 0.8390\nEpoch 59/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8504 - loss: 0.4072 - val_accuracy: 0.7226 - val_loss: 0.9005\nEpoch 60/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8498 - loss: 0.4274 - val_accuracy: 0.7395 - val_loss: 0.9005\nEpoch 61/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8701 - loss: 0.3931 - val_accuracy: 0.7245 - val_loss: 0.9017\nEpoch 62/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8558 - loss: 0.4219 - val_accuracy: 0.7273 - val_loss: 0.9345\nEpoch 63/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8677 - loss: 0.3838 - val_accuracy: 0.7226 - val_loss: 0.8863\nEpoch 64/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.8801 - loss: 0.3563 - val_accuracy: 0.7432 - val_loss: 0.7952\nEpoch 65/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8819 - loss: 0.3485 - val_accuracy: 0.7310 - val_loss: 0.8638\nEpoch 66/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8759 - loss: 0.3494 - val_accuracy: 0.7273 - val_loss: 0.8528\nEpoch 67/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8782 - loss: 0.3418 - val_accuracy: 0.7404 - val_loss: 0.8141\nEpoch 68/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8947 - loss: 0.3102 - val_accuracy: 0.7441 - val_loss: 0.9014\nEpoch 69/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8776 - loss: 0.3507 - val_accuracy: 0.7385 - val_loss: 0.8908\nEpoch 70/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8844 - loss: 0.3212 - val_accuracy: 0.7413 - val_loss: 0.8874\nEpoch 71/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 38ms/step - accuracy: 0.8905 - loss: 0.3222 - val_accuracy: 0.7366 - val_loss: 0.9254\nEpoch 72/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8920 - loss: 0.3024 - val_accuracy: 0.7498 - val_loss: 0.8325\nEpoch 73/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.8936 - loss: 0.2955 - val_accuracy: 0.7432 - val_loss: 0.9580\nEpoch 74/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9043 - loss: 0.2850 - val_accuracy: 0.7395 - val_loss: 0.9798\nEpoch 75/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9036 - loss: 0.2877 - val_accuracy: 0.7188 - val_loss: 1.0172\nEpoch 76/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9083 - loss: 0.2759 - val_accuracy: 0.7423 - val_loss: 0.9351\nEpoch 77/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.8939 - loss: 0.2962 - val_accuracy: 0.7263 - val_loss: 0.9588\nEpoch 78/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9077 - loss: 0.2532 - val_accuracy: 0.7338 - val_loss: 0.9184\nEpoch 79/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9083 - loss: 0.2606 - val_accuracy: 0.7226 - val_loss: 0.9988\nEpoch 80/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9169 - loss: 0.2392 - val_accuracy: 0.7460 - val_loss: 0.9640\nEpoch 81/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9201 - loss: 0.2434 - val_accuracy: 0.7516 - val_loss: 0.9244\nEpoch 82/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9145 - loss: 0.2382 - val_accuracy: 0.7488 - val_loss: 0.9568\nEpoch 83/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9190 - loss: 0.2360 - val_accuracy: 0.7376 - val_loss: 0.9801\nEpoch 84/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9198 - loss: 0.2319 - val_accuracy: 0.7235 - val_loss: 1.0802\nEpoch 85/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9080 - loss: 0.2529 - val_accuracy: 0.7123 - val_loss: 1.1015\nEpoch 86/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9127 - loss: 0.2464 - val_accuracy: 0.7507 - val_loss: 0.9630\nEpoch 87/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9196 - loss: 0.2330 - val_accuracy: 0.7263 - val_loss: 1.0841\nEpoch 88/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9083 - loss: 0.2818 - val_accuracy: 0.7488 - val_loss: 0.9237\nEpoch 89/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9202 - loss: 0.2162 - val_accuracy: 0.7291 - val_loss: 1.0263\nEpoch 90/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9181 - loss: 0.2382 - val_accuracy: 0.7441 - val_loss: 0.9402\nEpoch 91/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9309 - loss: 0.2039 - val_accuracy: 0.7320 - val_loss: 0.9715\nEpoch 92/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9354 - loss: 0.1861 - val_accuracy: 0.7263 - val_loss: 1.0989\nEpoch 93/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9273 - loss: 0.2083 - val_accuracy: 0.7404 - val_loss: 1.0644\nEpoch 94/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9327 - loss: 0.1810 - val_accuracy: 0.7479 - val_loss: 1.0390\nEpoch 95/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 38ms/step - accuracy: 0.9341 - loss: 0.1878 - val_accuracy: 0.7207 - val_loss: 1.0912\nEpoch 96/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 38ms/step - accuracy: 0.9323 - loss: 0.1858 - val_accuracy: 0.7132 - val_loss: 1.2096\nEpoch 97/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - accuracy: 0.9320 - loss: 0.2003 - val_accuracy: 0.7076 - val_loss: 1.2911\nEpoch 98/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9210 - loss: 0.2124 - val_accuracy: 0.7263 - val_loss: 1.1558\nEpoch 99/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9337 - loss: 0.2082 - val_accuracy: 0.7376 - val_loss: 1.0885\nEpoch 100/100\n\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - accuracy: 0.9316 - loss: 0.2086 - val_accuracy: 0.7291 - val_loss: 1.1075\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Create a figure with two subplots (1 row, 2 columns)\nplt.figure(figsize=(10, 4))\n\n# Subplot 1: Loss\nplt.subplot(1, 2, 1)\nplt.title('Loss Value')\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.legend(['loss', 'val_loss'])\nprint('Loss:', history.history['loss'][-1])\nprint('Val_loss:', history.history['val_loss'][-1])\n\n# Subplot 2: Accuracy\nplt.subplot(1, 2, 2)\nplt.title('Accuracy')\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.legend(['accuracy', 'val_accuracy'])\nprint('Accuracy:', history.history['accuracy'][-1])\nprint('Val_accuracy:', history.history['val_accuracy'][-1])\n\n# Show the plots\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-30T18:07:23.428839Z","iopub.execute_input":"2024-09-30T18:07:23.429818Z","iopub.status.idle":"2024-09-30T18:07:23.921934Z","shell.execute_reply.started":"2024-09-30T18:07:23.429775Z","shell.execute_reply":"2024-09-30T18:07:23.920721Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"Loss: 0.22664819657802582\nVal_loss: 1.1074860095977783\nAccuracy: 0.9254745841026306\nVal_accuracy: 0.7291471362113953\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"loss, accuracy = model.evaluate([X_test_mel, X_test_mfcc], y_test)\nprint(f\"Test Loss: {loss:.2f}\")\nprint(f\"Test Accuracy: {accuracy:.2f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-29T15:18:54.611108Z","iopub.execute_input":"2024-09-29T15:18:54.611954Z","iopub.status.idle":"2024-09-29T15:18:56.496276Z","shell.execute_reply.started":"2024-09-29T15:18:54.611911Z","shell.execute_reply":"2024-09-29T15:18:56.495341Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import classification_report, confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Predict on test set\ny_pred = model.predict([X_test_mel, X_test_mfcc])\ny_pred_classes = np.argmax(y_pred, axis=1)\ny_true_classes = np.argmax(y_test, axis=1)\n\n# Classification report\nreport = classification_report(y_true_classes, y_pred_classes, target_names=list(label_dict.keys()))\nprint(\"Classification Report:\")\nprint(report)\n\n# Compute and plot confusion matrix\ncm = confusion_matrix(y_true_classes, y_pred_classes)\nplt.figure(figsize=(10, 7))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=list(label_dict.keys()), yticklabels=list(label_dict.keys()))\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-29T15:25:06.977583Z","iopub.execute_input":"2024-09-29T15:25:06.977983Z","iopub.status.idle":"2024-09-29T15:25:08.122415Z","shell.execute_reply.started":"2024-09-29T15:25:06.977944Z","shell.execute_reply":"2024-09-29T15:25:08.121571Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## ResNet50","metadata":{}},{"cell_type":"markdown","source":"## Audio Spectrogram Tranformaer","metadata":{}},{"cell_type":"code","source":"# Use a pipeline as a high-level helper\nfrom transformers import pipeline\n\npipe = pipeline(\"audio-classification\", model=\"MIT/ast-finetuned-audioset-10-10-0.4593\")\n\n# Load model directly\nfrom transformers import AutoFeatureExtractor, AutoModelForAudioClassification\n\nextractor = AutoFeatureExtractor.from_pretrained(\"MIT/ast-finetuned-audioset-10-10-0.4593\")\nmodel = AutoModelForAudioClassification.from_pretrained(\"MIT/ast-finetuned-audioset-10-10-0.4593\")","metadata":{"execution":{"iopub.status.busy":"2024-09-30T15:30:54.543458Z","iopub.execute_input":"2024-09-30T15:30:54.544006Z","iopub.status.idle":"2024-09-30T15:31:19.126716Z","shell.execute_reply.started":"2024-09-30T15:30:54.543959Z","shell.execute_reply":"2024-09-30T15:31:19.125876Z"},"trusted":true},"execution_count":1,"outputs":[{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/26.8k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c5c44dee3b2d426b8f7ce53975f04fa0"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/346M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"83a1119bce4644a2b5a2d9127e660065"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"preprocessor_config.json:   0%|          | 0.00/297 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a203a7a5975a440c9fccc78282cae1b0"}},"metadata":{}},{"name":"stderr","text":"Hardware accelerator e.g. GPU is available in the environment, but no `device` argument is passed to the `Pipeline` object. Model will be on CPU.\n","output_type":"stream"}]},{"cell_type":"code","source":"from transformers import ASTFeatureExtractor, ASTForAudioClassification, Trainer, TrainingArguments\nimport torch\nimport librosa\nimport os\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nfrom tqdm import tqdm\n\n# Load the feature extractor and pre-trained AST model\nfeature_extractor = ASTFeatureExtractor.from_pretrained(\"MIT/ast-finetuned-audioset-10-10-0.4593\")\nmodel = ASTForAudioClassification.from_pretrained(\"MIT/ast-finetuned-audioset-10-10-0.4593\")\n\n# Function to load and resample audio files in batches\ndef load_and_resample_audio_batch(directory, batch_size=64, target_sr=16000):\n    audio_data = []\n    labels = []\n    label_dict = {}\n    label_idx = 0\n    batch_audio = []\n    batch_labels = []\n\n    for label in sorted(os.listdir(directory)):\n        label_path = os.path.join(directory, label)\n        if os.path.isdir(label_path):\n            if label not in label_dict:\n                label_dict[label] = label_idx\n                label_idx += 1\n\n            for file_name in tqdm(os.listdir(label_path), desc=f\"Processing {label}\"):\n                if file_name.endswith('.wav'):\n                    file_path = os.path.join(label_path, file_name)\n                    y, sr = librosa.load(file_path, sr=None)  # Load raw audio\n\n                    # Resample to 16000 Hz if not already\n                    if sr != target_sr:\n                        y = librosa.resample(y, orig_sr=sr, target_sr=target_sr)\n\n                    batch_audio.append(y)\n                    batch_labels.append(label_dict[label])\n\n                    # Process in batches\n                    if len(batch_audio) == batch_size:\n                        # Convert the batch to AST-compatible format\n                        inputs = feature_extractor(raw_speech=batch_audio, return_tensors=\"pt\", sampling_rate=target_sr)\n                        audio_data.append(inputs['input_values'])\n                        labels.append(torch.tensor(batch_labels, dtype=torch.long))\n                        batch_audio = []\n                        batch_labels = []\n\n    # Process remaining files in the last batch\n    if batch_audio:\n        inputs = feature_extractor(raw_speech=batch_audio, return_tensors=\"pt\", sampling_rate=target_sr)\n        audio_data.append(inputs['input_values'])\n        labels.append(torch.tensor(batch_labels, dtype=torch.long))\n\n    audio_data = torch.cat(audio_data)\n    labels = torch.cat(labels)\n    \n    return audio_data, labels, label_dict\n\n# Load and prepare dataset in batches\ntrain_audio_data, train_labels, label_dict = load_and_resample_audio_batch('/kaggle/input/irmas-training-data/IRMAS-TrainingData', batch_size=64)\n\n# Split into training and validation sets\ntrain_val_audio, test_audio, train_val_labels, test_labels = train_test_split(train_audio_data, train_labels, test_size=0.1, stratify=train_labels, random_state=1449)\ntrain_audio, val_audio, train_labels, val_labels = train_test_split(train_val_audio, train_val_labels, test_size=0.2, stratify=train_val_labels, random_state=1449)\n\n# PyTorch dataset for AST\nclass AudioDataset(torch.utils.data.Dataset):\n    def __init__(self, audio_data, labels):\n        self.audio_data = audio_data\n        self.labels = labels\n\n    def __len__(self):\n        return len(self.labels)\n\n    def __getitem__(self, idx):\n        return {\n            'input_values': self.audio_data[idx],\n            'labels': self.labels[idx]\n        }\n\n# Create datasets for training and validation\ntrain_dataset = AudioDataset(train_audio, train_labels)\nval_dataset = AudioDataset(val_audio, val_labels)\ntest_dataset = AudioDataset(test_audio, test_labels)","metadata":{"execution":{"iopub.status.busy":"2024-09-30T15:31:23.402006Z","iopub.execute_input":"2024-09-30T15:31:23.402689Z","iopub.status.idle":"2024-09-30T15:34:00.145545Z","shell.execute_reply.started":"2024-09-30T15:31:23.402648Z","shell.execute_reply":"2024-09-30T15:34:00.144534Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stderr","text":"Processing cel: 100%|██████████| 388/388 [00:21<00:00, 17.97it/s]\nProcessing cla: 100%|██████████| 505/505 [00:10<00:00, 47.71it/s]\nProcessing flu: 100%|██████████| 451/451 [00:09<00:00, 48.03it/s]\nProcessing gac: 100%|██████████| 637/637 [00:11<00:00, 53.09it/s]\nProcessing gel: 100%|██████████| 760/760 [00:15<00:00, 49.29it/s]\nProcessing org: 100%|██████████| 682/682 [00:13<00:00, 49.26it/s]\nProcessing pia: 100%|██████████| 721/721 [00:14<00:00, 49.24it/s]\nProcessing sax: 100%|██████████| 626/626 [00:12<00:00, 51.50it/s]\nProcessing tru: 100%|██████████| 577/577 [00:11<00:00, 51.21it/s]\nProcessing vio: 100%|██████████| 580/580 [00:12<00:00, 47.28it/s]\nProcessing voi: 100%|██████████| 778/778 [00:16<00:00, 47.82it/s]\n","output_type":"stream"}]},{"cell_type":"code","source":"from transformers import Trainer, TrainingArguments\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support, confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Function to compute metrics during evaluation\ndef compute_metrics(eval_pred):\n    predictions, labels = eval_pred\n    preds = np.argmax(predictions, axis=1)\n    accuracy = accuracy_score(labels, preds)\n    precision, recall, f1, _ = precision_recall_fscore_support(labels, preds, average='weighted')\n    return {\"accuracy\": accuracy, \"precision\": precision, \"recall\": recall, \"f1\": f1}\n\n# Lower learning rate and other training arguments\ntraining_args = TrainingArguments(\n    output_dir='./results',\n    evaluation_strategy=\"steps\",\n    per_device_train_batch_size=8,\n    per_device_eval_batch_size=8,\n    num_train_epochs=3,\n    logging_dir='./logs',\n    logging_steps=10,  # Log every 10 steps\n    save_steps=50,     # Save every 50 steps\n    eval_steps=50,     # Evaluate every 50 steps\n    load_best_model_at_end=True,\n    save_total_limit=2,\n    learning_rate=5e-5  # Lower learning rate\n)\n\n# Define Trainer for fine-tuning\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=train_dataset,\n    eval_dataset=val_dataset,\n    compute_metrics=compute_metrics  # Attach metrics calculation\n)\n\n# Train the model\ntrainer.train()\n\n# Evaluate on the validation set\neval_results = trainer.evaluate()\n\n# Print validation results\nprint(f\"Validation Results: {eval_results}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-30T15:34:10.609072Z","iopub.execute_input":"2024-09-30T15:34:10.610252Z","iopub.status.idle":"2024-09-30T16:47:51.602631Z","shell.execute_reply.started":"2024-09-30T15:34:10.610209Z","shell.execute_reply":"2024-09-30T16:47:51.600772Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/training_args.py:1525: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m The `run_name` is currently set to the same value as `TrainingArguments.output_dir`. If this was not intended, please specify a different run name by setting the `TrainingArguments.run_name` parameter.\n\u001b[34m\u001b[1mwandb\u001b[0m: Logging into wandb.ai. (Learn how to deploy a W&B server locally: https://wandb.me/wandb-server)\n\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n\u001b[34m\u001b[1mwandb\u001b[0m: Paste an API key from your profile and hit enter, or press ctrl+c to quit:","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"  ········································\n"},{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"wandb version 0.18.2 is available!  To upgrade, please run:\n $ pip install wandb --upgrade"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Tracking run with wandb version 0.17.7"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Run data is saved locally in <code>/kaggle/working/wandb/run-20240930_153420-ujpu11d6</code>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Syncing run <strong><a href='https://wandb.ai/6442041626-chulalongkorn-university/huggingface/runs/ujpu11d6' target=\"_blank\">./results</a></strong> to <a href='https://wandb.ai/6442041626-chulalongkorn-university/huggingface' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View project at <a href='https://wandb.ai/6442041626-chulalongkorn-university/huggingface' target=\"_blank\">https://wandb.ai/6442041626-chulalongkorn-university/huggingface</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View run at <a href='https://wandb.ai/6442041626-chulalongkorn-university/huggingface/runs/ujpu11d6' target=\"_blank\">https://wandb.ai/6442041626-chulalongkorn-university/huggingface/runs/ujpu11d6</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='1812' max='1812' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [1812/1812 1:11:49, Epoch 3/3]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Accuracy</th>\n      <th>Precision</th>\n      <th>Recall</th>\n      <th>F1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>50</td>\n      <td>1.321800</td>\n      <td>1.067037</td>\n      <td>0.657829</td>\n      <td>0.689000</td>\n      <td>0.657829</td>\n      <td>0.627195</td>\n    </tr>\n    <tr>\n      <td>100</td>\n      <td>0.923700</td>\n      <td>1.031589</td>\n      <td>0.662800</td>\n      <td>0.723604</td>\n      <td>0.662800</td>\n      <td>0.661068</td>\n    </tr>\n    <tr>\n      <td>150</td>\n      <td>1.063500</td>\n      <td>0.844095</td>\n      <td>0.725766</td>\n      <td>0.769055</td>\n      <td>0.725766</td>\n      <td>0.723513</td>\n    </tr>\n    <tr>\n      <td>200</td>\n      <td>0.984300</td>\n      <td>1.272439</td>\n      <td>0.611433</td>\n      <td>0.708465</td>\n      <td>0.611433</td>\n      <td>0.589211</td>\n    </tr>\n    <tr>\n      <td>250</td>\n      <td>0.925200</td>\n      <td>0.915926</td>\n      <td>0.699254</td>\n      <td>0.754891</td>\n      <td>0.699254</td>\n      <td>0.672712</td>\n    </tr>\n    <tr>\n      <td>300</td>\n      <td>1.182200</td>\n      <td>0.978281</td>\n      <td>0.686827</td>\n      <td>0.752145</td>\n      <td>0.686827</td>\n      <td>0.675593</td>\n    </tr>\n    <tr>\n      <td>350</td>\n      <td>0.947200</td>\n      <td>0.830032</td>\n      <td>0.746479</td>\n      <td>0.759960</td>\n      <td>0.746479</td>\n      <td>0.736588</td>\n    </tr>\n    <tr>\n      <td>400</td>\n      <td>0.703500</td>\n      <td>0.688138</td>\n      <td>0.779619</td>\n      <td>0.797284</td>\n      <td>0.779619</td>\n      <td>0.776669</td>\n    </tr>\n    <tr>\n      <td>450</td>\n      <td>0.665200</td>\n      <td>0.882338</td>\n      <td>0.733223</td>\n      <td>0.776713</td>\n      <td>0.733223</td>\n      <td>0.720914</td>\n    </tr>\n    <tr>\n      <td>500</td>\n      <td>0.532400</td>\n      <td>0.704132</td>\n      <td>0.769677</td>\n      <td>0.788754</td>\n      <td>0.769677</td>\n      <td>0.770556</td>\n    </tr>\n    <tr>\n      <td>550</td>\n      <td>0.541800</td>\n      <td>0.693104</td>\n      <td>0.769677</td>\n      <td>0.780062</td>\n      <td>0.769677</td>\n      <td>0.763915</td>\n    </tr>\n    <tr>\n      <td>600</td>\n      <td>0.850800</td>\n      <td>0.592589</td>\n      <td>0.808616</td>\n      <td>0.821900</td>\n      <td>0.808616</td>\n      <td>0.810716</td>\n    </tr>\n    <tr>\n      <td>650</td>\n      <td>0.508600</td>\n      <td>0.549305</td>\n      <td>0.811930</td>\n      <td>0.817539</td>\n      <td>0.811930</td>\n      <td>0.810695</td>\n    </tr>\n    <tr>\n      <td>700</td>\n      <td>0.646400</td>\n      <td>0.674678</td>\n      <td>0.804474</td>\n      <td>0.823200</td>\n      <td>0.804474</td>\n      <td>0.805499</td>\n    </tr>\n    <tr>\n      <td>750</td>\n      <td>0.190000</td>\n      <td>0.638538</td>\n      <td>0.830986</td>\n      <td>0.835082</td>\n      <td>0.830986</td>\n      <td>0.829536</td>\n    </tr>\n    <tr>\n      <td>800</td>\n      <td>0.463300</td>\n      <td>0.713527</td>\n      <td>0.799503</td>\n      <td>0.813991</td>\n      <td>0.799503</td>\n      <td>0.798651</td>\n    </tr>\n    <tr>\n      <td>850</td>\n      <td>0.328300</td>\n      <td>0.558503</td>\n      <td>0.842585</td>\n      <td>0.846484</td>\n      <td>0.842585</td>\n      <td>0.842557</td>\n    </tr>\n    <tr>\n      <td>900</td>\n      <td>0.334900</td>\n      <td>0.668307</td>\n      <td>0.824358</td>\n      <td>0.836325</td>\n      <td>0.824358</td>\n      <td>0.823804</td>\n    </tr>\n    <tr>\n      <td>950</td>\n      <td>0.442500</td>\n      <td>0.598459</td>\n      <td>0.821044</td>\n      <td>0.834462</td>\n      <td>0.821044</td>\n      <td>0.818491</td>\n    </tr>\n    <tr>\n      <td>1000</td>\n      <td>0.261200</td>\n      <td>0.563134</td>\n      <td>0.840099</td>\n      <td>0.844692</td>\n      <td>0.840099</td>\n      <td>0.839894</td>\n    </tr>\n    <tr>\n      <td>1050</td>\n      <td>0.274500</td>\n      <td>0.591858</td>\n      <td>0.831814</td>\n      <td>0.845260</td>\n      <td>0.831814</td>\n      <td>0.830425</td>\n    </tr>\n    <tr>\n      <td>1100</td>\n      <td>0.369700</td>\n      <td>0.522100</td>\n      <td>0.841756</td>\n      <td>0.851077</td>\n      <td>0.841756</td>\n      <td>0.841745</td>\n    </tr>\n    <tr>\n      <td>1150</td>\n      <td>0.367800</td>\n      <td>0.512662</td>\n      <td>0.855012</td>\n      <td>0.860259</td>\n      <td>0.855012</td>\n      <td>0.851558</td>\n    </tr>\n    <tr>\n      <td>1200</td>\n      <td>0.196600</td>\n      <td>0.499985</td>\n      <td>0.854184</td>\n      <td>0.859266</td>\n      <td>0.854184</td>\n      <td>0.855020</td>\n    </tr>\n    <tr>\n      <td>1250</td>\n      <td>0.118100</td>\n      <td>0.513369</td>\n      <td>0.859983</td>\n      <td>0.868905</td>\n      <td>0.859983</td>\n      <td>0.860084</td>\n    </tr>\n    <tr>\n      <td>1300</td>\n      <td>0.108500</td>\n      <td>0.479933</td>\n      <td>0.867440</td>\n      <td>0.872307</td>\n      <td>0.867440</td>\n      <td>0.867829</td>\n    </tr>\n    <tr>\n      <td>1350</td>\n      <td>0.057400</td>\n      <td>0.471313</td>\n      <td>0.873239</td>\n      <td>0.877941</td>\n      <td>0.873239</td>\n      <td>0.872694</td>\n    </tr>\n    <tr>\n      <td>1400</td>\n      <td>0.069400</td>\n      <td>0.476848</td>\n      <td>0.866611</td>\n      <td>0.871705</td>\n      <td>0.866611</td>\n      <td>0.867053</td>\n    </tr>\n    <tr>\n      <td>1450</td>\n      <td>0.064900</td>\n      <td>0.531311</td>\n      <td>0.875725</td>\n      <td>0.881331</td>\n      <td>0.875725</td>\n      <td>0.874064</td>\n    </tr>\n    <tr>\n      <td>1500</td>\n      <td>0.112100</td>\n      <td>0.478240</td>\n      <td>0.882353</td>\n      <td>0.884189</td>\n      <td>0.882353</td>\n      <td>0.882208</td>\n    </tr>\n    <tr>\n      <td>1550</td>\n      <td>0.141300</td>\n      <td>0.520457</td>\n      <td>0.867440</td>\n      <td>0.870699</td>\n      <td>0.867440</td>\n      <td>0.866224</td>\n    </tr>\n    <tr>\n      <td>1600</td>\n      <td>0.113500</td>\n      <td>0.489115</td>\n      <td>0.891466</td>\n      <td>0.893348</td>\n      <td>0.891466</td>\n      <td>0.891271</td>\n    </tr>\n    <tr>\n      <td>1650</td>\n      <td>0.131700</td>\n      <td>0.491727</td>\n      <td>0.884838</td>\n      <td>0.888564</td>\n      <td>0.884838</td>\n      <td>0.884776</td>\n    </tr>\n    <tr>\n      <td>1700</td>\n      <td>0.057000</td>\n      <td>0.468057</td>\n      <td>0.888981</td>\n      <td>0.890764</td>\n      <td>0.888981</td>\n      <td>0.888718</td>\n    </tr>\n    <tr>\n      <td>1750</td>\n      <td>0.062600</td>\n      <td>0.467703</td>\n      <td>0.889809</td>\n      <td>0.891244</td>\n      <td>0.889809</td>\n      <td>0.889699</td>\n    </tr>\n    <tr>\n      <td>1800</td>\n      <td>0.091700</td>\n      <td>0.460412</td>\n      <td>0.892295</td>\n      <td>0.893519</td>\n      <td>0.892295</td>\n      <td>0.892127</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"name":"stderr","text":"Some non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 1024}\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"name":"stdout","text":"Validation Results: {'eval_loss': 0.4604116976261139, 'eval_accuracy': 0.8922949461474731, 'eval_precision': 0.8935192208794254, 'eval_recall': 0.8922949461474731, 'eval_f1': 0.8921270168048419, 'eval_runtime': 52.3801, 'eval_samples_per_second': 23.043, 'eval_steps_per_second': 2.883, 'epoch': 3.0}\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[3], line 55\u001b[0m\n\u001b[1;32m     52\u001b[0m test_preds \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39margmax(test_results\u001b[38;5;241m.\u001b[39mpredictions, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[1;32m     54\u001b[0m \u001b[38;5;66;03m# Calculate classification metrics\u001b[39;00m\n\u001b[0;32m---> 55\u001b[0m report \u001b[38;5;241m=\u001b[39m \u001b[43mclassification_report\u001b[49m(test_labels, test_preds, target_names\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mlist\u001b[39m(label_dict\u001b[38;5;241m.\u001b[39mkeys()))\n\u001b[1;32m     56\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mClassification Report:\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     57\u001b[0m \u001b[38;5;28mprint\u001b[39m(report)\n","\u001b[0;31mNameError\u001b[0m: name 'classification_report' is not defined"],"ename":"NameError","evalue":"name 'classification_report' is not defined","output_type":"error"}]},{"cell_type":"code","source":"from sklearn.metrics import classification_report\n\n# Now, evaluate on the test set\ntest_dataset = AudioDataset(test_audio, test_labels)\ntest_results = trainer.predict(test_dataset)\ntest_preds = np.argmax(test_results.predictions, axis=1)\n\n# Calculate classification metrics\nreport = classification_report(test_labels, test_preds, target_names=list(label_dict.keys()))\nprint(\"Classification Report:\")\nprint(report)\n\n# Confusion matrix\ncm = confusion_matrix(test_labels, test_preds)\nplt.figure(figsize=(10, 7))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=list(label_dict.keys()), yticklabels=list(label_dict.keys()))\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-30T16:48:29.100144Z","iopub.execute_input":"2024-09-30T16:48:29.100559Z","iopub.status.idle":"2024-09-30T16:48:58.693292Z","shell.execute_reply.started":"2024-09-30T16:48:29.100522Z","shell.execute_reply":"2024-09-30T16:48:58.692110Z"},"trusted":true},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"name":"stdout","text":"Classification Report:\n              precision    recall  f1-score   support\n\n         cel       0.85      0.85      0.85        39\n         cla       0.82      0.74      0.78        50\n         flu       0.89      0.89      0.89        45\n         gac       0.90      0.94      0.92        64\n         gel       0.83      0.86      0.84        76\n         org       0.88      0.94      0.91        68\n         pia       0.93      0.88      0.90        72\n         sax       0.74      0.79      0.76        63\n         tru       0.92      0.78      0.84        58\n         vio       0.86      0.83      0.84        58\n         voi       0.94      1.00      0.97        78\n\n    accuracy                           0.87       671\n   macro avg       0.87      0.86      0.86       671\nweighted avg       0.87      0.87      0.87       671\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x700 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# **Test with unseen data**","metadata":{}},{"cell_type":"code","source":"import numpy as np\n\ndef pad_or_truncate(feature, max_length):\n    # If the feature is shorter than max_length, pad it with zeros\n    if feature.shape[1] < max_length:\n        padding = max_length - feature.shape[1]\n        return np.pad(feature, ((0, 0), (0, padding)), mode='constant')\n    \n    # If the feature is longer than max_length, truncate it\n    elif feature.shape[1] > max_length:\n        return feature[:, :max_length]\n    \n    # If the feature is already of the correct length, return it as is\n    return feature\n\ndef load_unseen_audio_files(directory, label_dict, max_length=500):\n    mel_spectrograms = []\n    mfccs = []\n    labels = []\n\n    for label in sorted(os.listdir(directory)):\n        label_path = os.path.join(directory, label)\n        if os.path.isdir(label_path):\n            if label not in label_dict:  # Skip labels not present in training data\n                continue\n\n            for file_name in os.listdir(label_path):\n                if file_name.endswith('.wav'):\n                    file_path = os.path.join(label_path, file_name)\n                    y, sr = librosa.load(file_path, sr=None)\n\n                    # Extract Mel-spectrogram\n                    mel_spectrogram = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=128, fmax=8000)\n                    mel_spectrogram_db = librosa.power_to_db(mel_spectrogram, ref=np.max)\n\n                    # Extract MFCCs\n                    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)\n\n                    # Pad or truncate features (optional, based on your model's requirements)\n                    mel_spectrogram_db = pad_or_truncate(mel_spectrogram_db, max_length)\n                    mfcc = pad_or_truncate(mfcc, max_length)\n\n                    mel_spectrograms.append(mel_spectrogram_db)\n                    mfccs.append(mfcc)\n                    labels.append(label_dict[label])\n\n    mel_spectrograms = np.array(mel_spectrograms)\n    mfccs = np.array(mfccs)\n    labels = to_categorical(labels, num_classes=len(label_dict))\n\n    return mel_spectrograms, mfccs, labels\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-29T15:22:00.643805Z","iopub.execute_input":"2024-09-29T15:22:00.644203Z","iopub.status.idle":"2024-09-29T15:22:00.656812Z","shell.execute_reply.started":"2024-09-29T15:22:00.644164Z","shell.execute_reply":"2024-09-29T15:22:00.655712Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"unseen_directory = '/kaggle/input/instrument-test-set'\nunseen_mel_spectrograms, unseen_mfccs, unseen_labels = load_unseen_audio_files(unseen_directory, label_dict)\n\nunseen_mel_spectrograms, unseen_mfccs = preprocess_data(unseen_mel_spectrograms, unseen_mfccs)","metadata":{"execution":{"iopub.status.busy":"2024-09-29T15:22:04.885995Z","iopub.execute_input":"2024-09-29T15:22:04.886744Z","iopub.status.idle":"2024-09-29T15:22:53.129193Z","shell.execute_reply.started":"2024-09-29T15:22:04.886705Z","shell.execute_reply":"2024-09-29T15:22:53.127741Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"loss, accuracy = model.evaluate([unseen_mel_spectrograms, unseen_mfccs], unseen_labels)\nprint(f\"Test Loss: {loss:.2f}\")\nprint(f\"Test Accuracy: {accuracy:.2f}\")\n\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Predict on test set\ny_pred = model.predict([unseen_mel_spectrograms, unseen_mfccs])\ny_pred_classes = np.argmax(y_pred, axis=1)\ny_true_classes = np.argmax(unseen_labels, axis=1)\n\n# Classification report\nreport = classification_report(y_true_classes, y_pred_classes, target_names=list(label_dict.keys()))\nprint(\"Classification Report:\")\nprint(report)\n\n# Compute and plot confusion matrix\ncm = confusion_matrix(y_true_classes, y_pred_classes)\nplt.figure(figsize=(10, 7))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=list(label_dict.keys()), yticklabels=list(label_dict.keys()))\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-29T15:23:54.032807Z","iopub.execute_input":"2024-09-29T15:23:54.033464Z","iopub.status.idle":"2024-09-29T15:23:55.907778Z","shell.execute_reply.started":"2024-09-29T15:23:54.033422Z","shell.execute_reply":"2024-09-29T15:23:55.906851Z"},"trusted":true},"execution_count":null,"outputs":[]}]}